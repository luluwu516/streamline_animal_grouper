import streamlit as stimport pandas as pdimport numpy as npfrom PIL import Imagefrom function import Animal_grouper, OverRetryException# sidebardef set_upload_file():    prompt = "Choose a xlsx file"    return st.file_uploader(prompt, type=["xlsx"])# maindef set_group_amount():    prompt = "Please enter the number of groups:"    max_amount = 100    min_amount = 2    return st.number_input(prompt, min_amount, max_amount)def set_threshold():    prompt = "Please set a threshold, which refers to the acceptable standard deviation: "    max_amount = 2.0    min_amount = 0.0    return st.slider(prompt, min_amount, max_amount, 1.0, 0.05)def set_is_based_on_gender():    prompt = "Based on gender"    return st.toggle(prompt)def display_info(df: pd.DataFrame, group_amount: int):    st.write("The figure shows the scatter plot of the experimental animals' weight. The table shows the descriptive statistics of each group.")    st.scatter_chart(df.T)    st.caption("Figure. Scatter plot of weight for experimental animals.")    st.caption(f"Table. Descriptive statistics of the {group_amount} experimental groups.")    st.dataframe(df.describe())def main():    sample_file = pd.read_excel('data/data_sample.xlsx')        # config    st.set_page_config(            page_title="Animal Grouper",            page_icon="./data/favicon.ico",            )        # sidebar    with st.sidebar:        st.image(Image.open('./data/logo.png'))        st.write("Upload your file with a specific format, as the following file:")        st.link_button('Download sample file', "https://docs.google.com/spreadsheets/d/1XA9Si1EeRSyaQrBsExxZc9oYfmGXz-4n/edit?usp=sharing&ouid=103951451574725603595&rtpof=true&sd=true")                uploaded_file = set_upload_file()        if uploaded_file is None:            df = sample_file        else:            df = pd.read_excel(uploaded_file)        # main    st.title("Animal Grouper")    st.write("This application is designed to group experimental animals by utilizing weight as a key parameter for classification.")    st.info("First, Upload the file with a specific format on the left sidebar or use the sample data without uploading. Then, set the group amount and the threshold, and toggle the switch if animal data is classified by gender. Finally, click the \"Group\" button. Woala! Here is the result!")    st.empty()    group_amount = set_group_amount()    threshold = set_threshold()    st.caption("If the deviation of animals' weight is low, we can adjust it to 1.0 or lower.")    st.write("Please toggle the switch if the data needs to be classified by gender:")    is_based_on_gender = set_is_based_on_gender()            with st.expander("See sample data" if uploaded_file is None else "See uploaded data"):            st.dataframe(df)        col = st.columns((3, 1, 3))[1]    button = col.button("Group")    if button:        try:            ag = Animal_grouper(df, group_amount, threshold, is_based_on_gender)            st.balloons()            st.success(f"Success! Here are the {group_amount} experimental groups.", icon="âœ…")                        st.dataframe(ag.output)            with st.expander("See more details"):                if is_based_on_gender:                    tab1, tab2, tab3 = st.tabs(["Summary", "Female", "Male"])                    with tab1:                        display_info(ag.output, group_amount)                    with tab2:                        st.write(f"Here are the {group_amount} experimental female groups.")                        st.dataframe(ag.output_female)                        display_info(ag.output_female, group_amount)                    with tab3:                        st.write(f"Here are the {group_amount} experimental male groups.")                        st.dataframe(ag.output_male)                        display_info(ag.output_male, group_amount)                else:                    display_info(ag.output, group_amount)                        except ValueError as ve:            st.error(f"Please make sure you upload the correct format file. Error: {ve}", icon="ðŸš¨")                    except OverRetryException as ore:            st.error(f"The deviation of the data is too big. Maybe adjust the threshold value. Error: {ore}", icon="ðŸš¨")                    except Exception as e:            st.error(f"Oh no... Something bad happened. Please contact me. Error: {e}", icon="ðŸš¨")                if __name__ == "__main__":    main()